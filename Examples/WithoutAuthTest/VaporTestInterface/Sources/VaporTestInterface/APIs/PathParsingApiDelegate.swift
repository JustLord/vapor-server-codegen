import Vapor
// PathParsingApiDelegate.swift
//
// Generated by vapor-server-codegen
// https://github.com/thecheatah/SwiftVapor-swagger-codegen
// Template Input: /APIs.PathParsing


public enum multipleDepthResponse: ResponseEncodable {
  case http200

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200:      let response = Response()
      response.status = HTTPStatus(statusCode: 200)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum multipleParameterResponse: ResponseEncodable {
  case http200(MultipleParameterResponse)

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):        return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    }
  }
}


public enum rootPathResponse: ResponseEncodable {
  case http200

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200:      let response = Response()
      response.status = HTTPStatus(statusCode: 200)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum singleDepthResponse: ResponseEncodable {
  case http200

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200:      let response = Response()
      response.status = HTTPStatus(statusCode: 200)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum singleParameterResponse: ResponseEncodable {
  case http200(String)

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):        return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    }
  }
}

public protocol PathParsingApiDelegate {
  associatedtype AuthType
  /**
  GET /path/multiple/depth
  Test ability to parse multiple depth */
  func multipleDepth(with req: Request) throws -> EventLoopFuture<multipleDepthResponse>
  /**
  GET /path/{param1}/and/{param2}
  Test ability to intake single parameter */
  func multipleParameter(with req: Request, param1: String, param2: String) throws -> EventLoopFuture<multipleParameterResponse>
  /**
  GET /
  Test the ability to route the root path */
  func rootPath(with req: Request) throws -> EventLoopFuture<rootPathResponse>
  /**
  GET /path-single-depth
  Test ability to parse single depth */
  func singleDepth(with req: Request) throws -> EventLoopFuture<singleDepthResponse>
  /**
  GET /path/{param1}
  Test ability to intake single parameter */
  func singleParameter(with req: Request, param1: String) throws -> EventLoopFuture<singleParameterResponse>
}
