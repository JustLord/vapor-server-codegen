import Vapor
// HeadersApiDelegate.swift
//
// Generated by SwiftVapor3 swagger-codegen
// https://github.com/swagger-api/swagger-codegen
// Template Input: /APIs.Headers


public enum requestHeadersResponse: ResponseEncodable {
  case http200(RequestHeadersResponse)

  public func encode(for request: Request) throws -> EventLoopFuture<Response> {
    let response = request.response()
    switch self {
    case .http200(let content):
      response.http.status = HTTPStatus(statusCode: 200)
      try response.content.encode(content)
    }
    return Future.map(on: request) { response }
  }
}


public enum responseHeadersResponse: ResponseEncodable {
  case http303(location: String?)

  public func encode(for request: Request) throws -> EventLoopFuture<Response> {
    let response = request.response()
    switch self {
    case .http303(let location):
      if let location = location {
        response.http.headers.add(name: "location", value: location)
      }
      response.http.status = HTTPStatus(statusCode: 303)
    }
    return Future.map(on: request) { response }
  }
}

public protocol HeadersApiDelegate {
  associatedtype AuthType
  /**
  GET /headers/in-request
  Ability to read headers sent */
  func requestHeaders(with req: Request, xExampleRequiredHeader: String, xExampleArrayHeader: [String]) throws -> Future<requestHeadersResponse>
  /**
  GET /headers/in-response */
  func responseHeaders(with req: Request) throws -> Future<responseHeadersResponse>
}
