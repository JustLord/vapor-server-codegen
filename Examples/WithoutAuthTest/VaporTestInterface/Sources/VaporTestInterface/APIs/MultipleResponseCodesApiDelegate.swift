import Vapor
// MultipleResponseCodesApiDelegate.swift
//
// Generated by vapor-server-codegen
// https://github.com/thecheatah/SwiftVapor-swagger-codegen
// Template Input: /APIs.MultipleResponseCodes


public enum multipleResponseCodesResponse: ResponseEncodable {
  case http200
  case http201(SimpleObject)
  case http401
  case http500

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200:      let response = Response()
      response.status = HTTPStatus(statusCode: 200)
      return request.eventLoop.makeSucceededFuture(response)
    case .http201(let content):        return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 201)
        return response
      }
    case .http401:      let response = Response()
      response.status = HTTPStatus(statusCode: 401)
      return request.eventLoop.makeSucceededFuture(response)
    case .http500:      let response = Response()
      response.status = HTTPStatus(statusCode: 500)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}

public protocol MultipleResponseCodesApiDelegate {
  associatedtype AuthType
  /**
  POST /multiple/response/codes
  Test ability to support multiple response codes in a single call */
  func multipleResponseCodes(with req: Request, body: MultipleResponseCodeRequest) throws -> EventLoopFuture<multipleResponseCodesResponse>
}
