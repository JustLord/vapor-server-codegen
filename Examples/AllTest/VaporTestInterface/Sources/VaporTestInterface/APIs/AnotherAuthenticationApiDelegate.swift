import Vapor
// AnotherAuthenticationApiDelegate.swift
//
// Generated by SwiftVapor3 swagger-codegen
// https://github.com/swagger-api/swagger-codegen
// Template Input: /APIs.AnotherAuthentication


public enum anotherApiAnotherSecurityProtectedEndpointResponse: ResponseEncodable {
  case http200(SecurityProtectedEndpointResponse)

  public func encode(for request: Request) throws -> EventLoopFuture<Response> {
    let response = request.response()
    switch self {
    case .http200(let content):
      response.http.status = HTTPStatus(statusCode: 200)
      try response.content.encode(content)
    }
    return Future.map(on: request) { response }
  }
}


public enum anotherApiSecurityProtectedEndpointResponse: ResponseEncodable {
  case http200(SecurityProtectedEndpointResponse)

  public func encode(for request: Request) throws -> EventLoopFuture<Response> {
    let response = request.response()
    switch self {
    case .http200(let content):
      response.http.status = HTTPStatus(statusCode: 200)
      try response.content.encode(content)
    }
    return Future.map(on: request) { response }
  }
}

public protocol AnotherAuthenticationApiDelegate {
  associatedtype AuthType
  /**
  GET /authentication-another/another */
  func anotherApiAnotherSecurityProtectedEndpoint(with req: Request, asAuthenticated user: AuthType) throws -> Future<anotherApiAnotherSecurityProtectedEndpointResponse>
  /**
  GET /authentication-another/single */
  func anotherApiSecurityProtectedEndpoint(with req: Request, asAuthenticated user: AuthType) throws -> Future<anotherApiSecurityProtectedEndpointResponse>
}
