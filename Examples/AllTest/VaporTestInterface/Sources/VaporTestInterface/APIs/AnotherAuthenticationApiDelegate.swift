import Vapor
// AnotherAuthenticationApiDelegate.swift
//
// Generated by vapor-server-codegen
// https://github.com/thecheatah/SwiftVapor-swagger-codegen
// Template Input: /APIs.AnotherAuthentication


public enum anotherApiAnotherSecurityProtectedEndpointResponse: ResponseEncodable {
  case http200(SecurityProtectedEndpointResponse)

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    }
  }
}


public enum anotherApiSecurityProtectedEndpointResponse: ResponseEncodable {
  case http200(SecurityProtectedEndpointResponse)

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    }
  }
}

public protocol AnotherAuthenticationApiDelegate {
  associatedtype AuthType
  /**
  GET /authentication-another/another */
  func anotherApiAnotherSecurityProtectedEndpoint(with req: Request, asAuthenticated user: AuthType) throws -> EventLoopFuture<anotherApiAnotherSecurityProtectedEndpointResponse>
  /**
  GET /authentication-another/single */
  func anotherApiSecurityProtectedEndpoint(with req: Request, asAuthenticated user: AuthType) throws -> EventLoopFuture<anotherApiSecurityProtectedEndpointResponse>
}
