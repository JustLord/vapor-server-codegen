import Vapor
// AuthenticationApiDelegate.swift
//
// Generated by SwiftVapor3 swagger-codegen
// https://github.com/swagger-api/swagger-codegen
// Template Input: /APIs.Authentication


public enum anotherSecurityProtectedEndpointResponse: ResponseEncodable {
  case http200(SecurityProtectedEndpointResponse)

  public func encode(for request: Request) throws -> EventLoopFuture<Response> {
    let response = request.response()
    switch self {
    case .http200(let content):
      response.http.status = HTTPStatus(statusCode: 200)
      try response.content.encode(content)
    }
    return Future.map(on: request) { response }
  }
}


public enum securityProtectedEndpointResponse: ResponseEncodable {
  case http200(SecurityProtectedEndpointResponse)

  public func encode(for request: Request) throws -> EventLoopFuture<Response> {
    let response = request.response()
    switch self {
    case .http200(let content):
      response.http.status = HTTPStatus(statusCode: 200)
      try response.content.encode(content)
    }
    return Future.map(on: request) { response }
  }
}

public protocol AuthenticationApiDelegate {
  associatedtype AuthType
  /**
  GET /authentication/another */
  func anotherSecurityProtectedEndpoint(with req: Request, asAuthenticated user: AuthType) throws -> Future<anotherSecurityProtectedEndpointResponse>
  /**
  GET /authentication/single */
  func securityProtectedEndpoint(with req: Request, asAuthenticated user: AuthType) throws -> Future<securityProtectedEndpointResponse>
}
