import Vapor
// HeadersApiDelegate.swift
//
// Generated by vapor-server-codegen
// https://github.com/thecheatah/SwiftVapor-swagger-codegen
// Template Input: /APIs.Headers


public enum requestHeadersResponse: ResponseEncodable {
  case http200(RequestHeadersResponse)

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    }
  }
}


public enum responseHeadersResponse: ResponseEncodable {
  case http303(location: String?)

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http303(let location):
      let response = Response()
      response.status = HTTPStatus(statusCode: 303)
      if let location = location {
        response.headers.add(name: "location", value: location)
      }
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}

public protocol HeadersApiDelegate {
  associatedtype AuthType
  /**
  GET /headers/in-request
  Ability to read headers sent */
  func requestHeaders(with req: Request, xExampleRequiredHeader: String, xExampleArrayHeader: [String]) throws -> EventLoopFuture<requestHeadersResponse>
  /**
  GET /headers/in-response */
  func responseHeaders(with req: Request) throws -> EventLoopFuture<responseHeadersResponse>
}
