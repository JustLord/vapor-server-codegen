import Vapor
// PathParsingApiDelegate.swift
//
// Generated by SwiftVapor3 swagger-codegen
// https://github.com/swagger-api/swagger-codegen
// Template Input: /APIs.PathParsing


public enum multipleDepthResponse: ResponseEncodable {
  case http200

  public func encode(for request: Request) throws -> EventLoopFuture<Response> {
    let response = request.response()
    switch self {
    case .http200:
      response.http.status = HTTPStatus(statusCode: 200)
    }
    return Future.map(on: request) { response }
  }
}


public enum multipleParameterResponse: ResponseEncodable {
  case http200(MultipleParameterResponse)

  public func encode(for request: Request) throws -> EventLoopFuture<Response> {
    let response = request.response()
    switch self {
    case .http200(let content):
      response.http.status = HTTPStatus(statusCode: 200)
      try response.content.encode(content)
    }
    return Future.map(on: request) { response }
  }
}


public enum rootPathResponse: ResponseEncodable {
  case http200

  public func encode(for request: Request) throws -> EventLoopFuture<Response> {
    let response = request.response()
    switch self {
    case .http200:
      response.http.status = HTTPStatus(statusCode: 200)
    }
    return Future.map(on: request) { response }
  }
}


public enum singleDepthResponse: ResponseEncodable {
  case http200

  public func encode(for request: Request) throws -> EventLoopFuture<Response> {
    let response = request.response()
    switch self {
    case .http200:
      response.http.status = HTTPStatus(statusCode: 200)
    }
    return Future.map(on: request) { response }
  }
}


public enum singleParameterResponse: ResponseEncodable {
  case http200(String)

  public func encode(for request: Request) throws -> EventLoopFuture<Response> {
    let response = request.response()
    switch self {
    case .http200(let content):
      response.http.status = HTTPStatus(statusCode: 200)
      try response.content.encode(content)
    }
    return Future.map(on: request) { response }
  }
}

public protocol PathParsingApiDelegate {
  /**
	GET /path/multiple/depth
    Test ability to parse multiple depth */
    
    func multipleDepth(with req: Request) throws -> Future<multipleDepthResponse>
  /**
	GET /path/{param1}/and/{param2}
    Test ability to intake single parameter */
    
    func multipleParameter(with req: Request, param1: String, param2: String) throws -> Future<multipleParameterResponse>
  /**
	GET /
    Test the ability to route the root path */
    
    func rootPath(with req: Request) throws -> Future<rootPathResponse>
  /**
	GET /path-single-depth
    Test ability to parse single depth */
    
    func singleDepth(with req: Request) throws -> Future<singleDepthResponse>
  /**
	GET /path/{parameter}
    Test ability to intake single parameter */
    
    func singleParameter(with req: Request, parameter: String) throws -> Future<singleParameterResponse>
}
