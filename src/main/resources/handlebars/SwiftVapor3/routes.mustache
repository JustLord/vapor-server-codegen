import Vapor
// routes.swift
//
// Generated by SwiftVapor3 swagger-codegen
// https://github.com/swagger-api/swagger-codegen
// Template Input: {{importPath}}

private class SwaggerPath: PathComponentsRepresentable {
  private var path: String

  fileprivate init(path: String) {
    self.path = path
  }

  public func convertToPathComponents() -> [PathComponent] {
    return path.split(separator: "/").map {
      if $0.starts(with: "{") && $0.hasSuffix("}") {
        return PathComponent.parameter("string")
      } else {
        return PathComponent.constant(.init($0))
      }
    }
  }
}

public func routes(_ router: Router{{#apiInfo}}{{#apis}}, {{classVarName}}: {{classname}}{{/apis}}{{/apiInfo}}) throws {
{{#apiInfo}}{{#apis}}
  //for {{classVarName}}
{{#operations}}{{#operation}}{{#contents}}
  router.on(.{{httpMethod}}, at: SwaggerPath(path: "{{path}}")) { request -> Future<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}HTTPStatus{{/returnType}}> in
{{#queryParams}}
    let {{paramName}} = try{{^required}}?{{/required}} request.query.get({{dataType}}.self, at: "{{paramName}}")
{{/queryParams}}{{#pathParams}}    let {{paramName}} = try request.parameters.next({{dataType}}.self)
{{/pathParams}}{{#bodyParam}}    return try request.content.decode({{dataType}}.self).flatMap { body in
  {{/bodyParam}}
    return try {{classVarName}}.{{operationId}}(request: request{{#hasParams}}, {{#parameters}}{{paramName}}: {{paramName}}{{#hasMore}}, {{/hasMore}}{{/parameters}}{{/hasParams}})
{{#bodyParam}}  	}
{{/bodyParam}}
  }
{{/contents}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
}

